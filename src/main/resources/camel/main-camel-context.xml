<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath:application.properties" ignore-resource-not-found="true"/>

    <bean id="noErrorHandler" class="org.apache.camel.builder.NoErrorHandlerBuilder"/>


    <bean id="forced" class="java.lang.Exception">
        <constructor-arg index="0" value="Exception"/>
    </bean>

    <bean id="defaultUuid" class="org.apache.camel.impl.engine.DefaultUuidGenerator"/>

    <bean id="test" class="com.voicecomm.telegramnotifier.utils.Test"/>

    <bean id="utils" class="com.voicecomm.telegramnotifier.utils.Utils"/>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${spring.datasource.driver-class-name}"/>
        <property name="url" value="${spring.datasource.jdbcUrl}"/>
        <property name="username" value="${spring.datasource.username}"/>
        <property name="password" value="${spring.datasource.password}"/>
    </bean>

    <bean id="keyboardBuilder" class="com.voicecomm.telegramnotifier.beans.KeyboardBuilder">
        <constructor-arg name="userkeyboard">
            <list>
                <value>Short tasks statistic</value>
                <value>Short voice calls statistic</value>
                <value>Short SabreIx statistic</value>
                <value>Sabre.pl status</value>
                <value>Sabre.pl log</value>
            </list>
        </constructor-arg>
        <constructor-arg name="adminkeyboard">
            <list>
                <value>Sabre.pl log</value>
                <value>Sabre.pl status</value>
                <value>Short tasks statistic</value>
                <value>Short voice calls statistic</value>
                <value>Short SabreIx statistic</value>
                <value>Get users</value>
                <value>Sabre start</value>
                <value>Sabre stop</value>
                <value>Test</value>
            </list>
        </constructor-arg>
        <constructor-arg name="keyboardsTitle" value="Choose one option:"/>
    </bean>


    <camelContext id="SampleCamel" xmlns="http://camel.apache.org/schema/spring">
        <propertyPlaceholder id="app_properties" location="classpath:application.properties"/>
        <endpoint id="telegramBot" uri="telegram:bots?authorizationToken=${telegram.authorization-token}"/>

        <dataFormats>
            <json id="json" library="Jackson" include="NON_NULL" prettyPrint="true"/>
        </dataFormats>

        <route>
            <from uri="telegramBot"/>
            <setHeader name="incomingMessage">
                <simple>${body}</simple>
            </setHeader>
            <to uri="direct:checkAccessRights"/>
            <log message="USER: ${header.incomingMessage.getFrom.firstName} COMMAND: ${header.incomingMessage.getText}" loggingLevel="INFO"/>
            <choice>
                <when>
                    <simple resultType="java.lang.Boolean">${header.accessAllowed} != true</simple>
                    <choice>
                        <when>
                            <simple>${header.incomingMessage.getText} contains 'password:'</simple>
                            <bean ref="test" method="test('VERIFY')"/>
                            <to uri="direct:verifyPassword"/>
                            <to uri="direct:checkAccessRights"/>
                            <choice>
                                <when>
                                    <simple resultType="java.lang.Boolean">${header.accessAllowed} == true</simple>
                                    <to uri="direct:getKeyboard"/>
                                    <to uri="telegramBot"/>
                                </when>
                                <otherwise>
                                    <setBody>
                                        <constant>Доступ закрыт. Запросите пароль у администратора чата и введите его в формате password:пароль_выданный_администратором
                                        </constant>
                                    </setBody>
                                    <to uri="telegramBot"/>
                                </otherwise>
                            </choice>
                        </when>
                        <otherwise>
                            <to uri="direct:loginNewUser"/>
                            <setBody>
                                <constant>Доступ закрыт. Запросите пароль у администратора чата и введите его в формате password:[password]
                                </constant>
                            </setBody>
                            <to uri="telegramBot"/>
                        </otherwise>
                    </choice>
                </when>
                <otherwise>
                    <to uri="direct:handleCommand"/>
                </otherwise>
            </choice>
        </route>

        <route>
            <from uri="direct:handleCommand"/>
            <to uri="direct:handleUserCommand"/>
            <to uri="telegramBot"/>
        </route>

        <route>
            <from uri="direct:handleUserCommand"/>
            <choice>
                <when>
                    <simple>${header.incomingMessage.getText} == 'Get users'</simple>
                    <to uri="direct:getUsersInformation"/>
                </when>
                <when>
                    <simple>${header.incomingMessage.getText} == 'Test'</simple>
                    <setBody>
                        <constant>HEY HEY HEY! NE BALUI! =))</constant>
                    </setBody>
                </when>
                <when>
                    <simple>${header.incomingMessage.getText} == 'Short tasks statistic'</simple>
                    <setHeader name="CamelHttpUri">
                        <constant>{{aflmonitor.endpoint.baseurl}}{{aflmonitor.endpoint.short-task-stat}}</constant>
                    </setHeader>
                    <to uri="direct:sendPostRequestToAflMonitor"/>
                </when>
                <when>
                    <simple>${header.incomingMessage.getText} == 'Short voice calls statistic'</simple>
                    <setHeader name="CamelHttpUri">
                        <constant>{{aflmonitor.endpoint.baseurl}}{{aflmonitor.endpoint.short-calls-stat}}</constant>
                    </setHeader>
                    <to uri="direct:sendPostRequestToAflMonitor"/>
                </when>
                <when>
                    <simple>${header.incomingMessage.getText} == 'Sabre.pl log'</simple>
                    <setHeader name="CamelHttpUri">
                        <constant>{{aflmonitor.endpoint.baseurl}}{{aflmonitor.endpoint.sabrepllog}}</constant>
                    </setHeader>
                    <to uri="direct:sendPostRequestToAflMonitor"/>
                    <bean ref="utils" method="getLastSubstring(4096)"/>
                </when>
                <when>
                    <simple>${header.incomingMessage.getText} == 'Sabre.pl status'</simple>
                    <setHeader name="CamelHttpUri">
                        <constant>{{aflmonitor.endpoint.baseurl}}{{aflmonitor.endpoint.sabreplstate}}</constant>
                    </setHeader>
                    <to uri="direct:sendPostRequestToAflMonitor"/>
                    <bean ref="utils" method="getLastSubstring(4096)"/>
                </when>
                <when>
                    <simple>${header.incomingMessage.getText} == 'Short SabreIx statistic'</simple>
                    <setHeader name="CamelHttpUri">
                        <constant>{{aflmonitor.endpoint.baseurl}}{{aflmonitor.endpoint.short-sabreix-stat}}</constant>
                    </setHeader>
                    <to uri="direct:sendPostRequestToAflMonitor"/>
                </when>
                <when>
                    <simple>${header.incomingMessage.getText} == 'keyboard'</simple>
                    <to uri="direct:getKeyboard"/>
                </when>
                <when>
                    <simple>${header.incomingMessage.getText} == 'Sabre start'</simple>
                    <setHeader name="CamelHttpUri">
                        <constant>{{aflmonitor.endpoint.baseurl}}{{aflmonitor.endpoint.sabre-command}}?command=sabre start</constant>
                    </setHeader>
                    <to uri="direct:sendPostRequestToAflMonitor"/>
                </when>
                <when>
                    <simple>${header.incomingMessage.getText} == 'Sabre stop'</simple>
                    <setHeader name="CamelHttpUri">
                        <constant>{{aflmonitor.endpoint.baseurl}}{{aflmonitor.endpoint.sabre-command}}?command=sabre stop</constant>
                    </setHeader>
                    <to uri="direct:sendPostRequestToAflMonitor"/>
                </when>
                <otherwise>
                    <setBody>
                        <constant>Command is nt recognized</constant>
                    </setBody>
                </otherwise>
            </choice>
        </route>

        <route>
            <from uri="direct:getKeyboard"/>
            <to uri="direct:checkIsAdmin"/>
            <choice>
                <when>
                    <simple resultType="java.lang.Boolean">${header.isAdmin} == true</simple>
                    <bean ref="keyboardBuilder" method="getKeyBoard('ADMIN')"/>
                </when>
                <otherwise>
                    <bean ref="keyboardBuilder" method="getKeyBoard('USER')"/>
                </otherwise>
            </choice>
        </route>

        <route>
            <from uri="direct:verifyPassword"/>
            <setHeader name="USER_ID">
                <simple>${header.incomingMessage.getFrom.getId}</simple>
            </setHeader>
            <setHeader name="PASSWORD">
                <simple>${header.incomingMessage.getText}</simple>
            </setHeader>
            <setBody>
                <simple>
                    UPDATE TELEGRAM_USERS SET REGISTERED = true WHERE USERID = :?USER_ID AND 'password:' || PASSWORD = :?PASSWORD
                </simple>
            </setBody>
            <to uri="jdbc:dataSource?useHeadersAsParameters=true"/>
        </route>

        <route>
            <from uri="direct:checkAccessRights"/>
            <bean ref="test" method="test"/>
            <setHeader name="USER_ID">
                <simple>${header.incomingMessage.getFrom.getId}</simple>
            </setHeader>
            <setBody>
                <simple>
                    SELECT DISTINCT REGISTERED FROM TELEGRAM_USERS WHERE USERID = :?USER_ID
                </simple>
            </setBody>
            <to uri="jdbc:dataSource?useHeadersAsParameters=true&amp;outputType=SelectOne"/>
            <setHeader name="accessAllowed">
                <simple resultType="java.lang.Boolean">${body} == true</simple>
            </setHeader>
        </route>

        <route>
            <from uri="direct:checkIsAdmin"/>
            <setHeader name="USER_ID">
                <simple>${header.incomingMessage.getFrom.getId}</simple>
            </setHeader>
            <setBody>
                <simple>
                    SELECT DISTINCT ADMIN FROM TELEGRAM_USERS WHERE USERID = :?USER_ID
                </simple>
            </setBody>
            <to uri="jdbc:dataSource?useHeadersAsParameters=true&amp;outputType=SelectOne"/>
            <bean ref="test" method="test"/>
            <setHeader name="isAdmin">
                <simple resultType="java.lang.Boolean">${body} == true</simple>
            </setHeader>
        </route>

        <route>
            <from uri="direct:loginNewUser"/>
            <setHeader name="USERID">
                <simple>${header.incomingMessage.getFrom.getId}</simple>
            </setHeader>
            <setHeader name="CHATID">
                <simple>${header.incomingMessage.getChat.getId}</simple>
            </setHeader>
            <setHeader name="FIRSTNAME">
                <simple>${header.incomingMessage.getFrom.firstName}</simple>
            </setHeader>
            <setHeader name="LASTNAME">
                <simple>${header.incomingMessage.getFrom.lastName}</simple>
            </setHeader>
            <setHeader name="USERNAME">
                <simple>${header.incomingMessage.getFrom.username}</simple>
            </setHeader>
            <setHeader name="PASSWORD">
                <method ref="utils" method="generatePassword(6)"/>
            </setHeader>
            <setBody>
                <simple>
                    INSERT INTO TELEGRAM_USERS (USERID, CHATID, FIRSTNAME , LASTNAME, USERNAME, REGISTERED, NOTIFICATIONS, ADMIN, PASSWORD, updatetime)
                    SELECT :?USERID, :?CHATID, :?FIRSTNAME, :?LASTNAME, :?USERNAME, false, false, false, :?PASSWORD, CURRENT_TIME
                    WHERE NOT EXISTS (SELECT 1 FROM TELEGRAM_USERS WHERE USERID = :?USERID AND CHATID = :?CHATID)
                </simple>
            </setBody>
            <to uri="jdbc:dataSource?useHeadersAsParameters=true"/>
            <bean ref="test" method="test('NEW_USER')"/>
        </route>

        <route>
            <from uri="direct:sendPostRequestToAflMonitor"/>
            <setBody>
                <constant></constant>
            </setBody>
            <setHeader name="Content-Type">
                <constant>text/html</constant>
            </setHeader>
            <setHeader name="CamelHttpMethod">
                <constant>POST</constant>
            </setHeader>
            <to uri="{{aflmonitor.endpoint.baseurl}}"/>
            <transform>
                <simple resultType="java.lang.String">${body}</simple>
            </transform>
        </route>

    </camelContext>
</beans>